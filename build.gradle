buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.0'
    }
}

ext {
    buildProperties = new Properties()
    file("assets/version").withReader { reader ->
        buildProperties.load(reader)
        buildProperties.version = buildProperties.major + "." + buildProperties.minor + "." + buildProperties.point
        println "VERSION: " + buildProperties.version
    }

    build = "";
    hash = "";
    if (hasGit()) {
        build = shell("git rev-list HEAD --count").text.trim()
        hash = shell("git rev-parse HEAD").text.trim()
        file("assets/build").write("build=" + build + System.getProperty("line.separator") + "hash=" + hash, 'UTF-8')
        println "BUILD:   " + build
        println "HASH:    " + hash
    } else {
        println "Git was not found in path!"
        file("assets/build").delete()
    }

    localProperties = new Properties()
    if (file("build.properties").exists()) {
        file("build.properties").withReader { reader ->
            localProperties.load(reader)
        }
    }
    if (localProperties.ANDROID_KEYSTORE_FILE == null) localProperties.ANDROID_KEYSTORE_FILE = "keystore"
    if (localProperties.ANDROID_KEYSTORE_PASSWORD == null) localProperties.ANDROID_KEYSTORE_PASSWORD = "password"
    if (localProperties.ANDROID_KEYSTORE_KEY_ALIAS == null) localProperties.ANDROID_KEYSTORE_KEY_ALIAS = "android"
    if (localProperties.ANDROID_KEYSTORE_KEY_PASSWORD == null) localProperties.ANDROID_KEYSTORE_KEY_PASSWORD = "password"
    if (localProperties.MAVEN_REPO_PATH == null) localProperties.MAVEN_REPO_PATH = getRootProject().getProjectDir().absolutePath + "/repo/"
    if (localProperties.MAVEN_REPO_USERNAME == null) localProperties.MAVEN_REPO_USERNAME = ""
    if (localProperties.MAVEN_REPO_PASSWORD == null) localProperties.MAVEN_REPO_PASSWORD = ""
}

allprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"

    version = System.getenv("BUILD_NUMBER")

    ext {
        appName = 'Cubes'
        gdxVersion = '1.9.2'
        androidBuildToolsVersion = '23.0.3'
        androidSdkVersion = 21
        dataVersion = '2.2'
        buildProperties = getRootProject().buildProperties
        build = getRootProject().build
        localProperties = getRootProject().localProperties
        isRelease = false
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url "http://ethanjones.me/maven/snapshots/" }
        maven { url "http://ethanjones.me/maven/releases/" }
    }
}

project(":core") {
    apply plugin: "java"
    apply plugin: "maven-publish"

    dependencies {
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        compile "ethanjones:data:$dataVersion"
    }
}

project(":desktop") {
    apply plugin: "java"

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    }
}

project(":client") {
    apply plugin: "java"
    apply plugin: "maven-publish"

    dependencies {
        compile project(":desktop")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"

    }
}

project(":server") {
    apply plugin: "java"
    apply plugin: "maven-publish"

    dependencies {
        compile project(":desktop")
        compile "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
    }
}

project(":android") {
    apply plugin: "android-sdk-manager"
    apply plugin: "android"
    apply plugin: "maven-publish"

    configurations { natives }

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
    }
}
tasks.eclipse.doLast {
    delete ".project"
}

task travis(dependsOn: ['core:publish', 'server:publish', 'client:publish', 'android:publish']) {

}

def String getMavenVersionString() {
    def str = buildProperties.version;
    if (!isRelease) {
        str = str + "-SNAPSHOT"
    }
    return str
}

def String getMavenRepo() {
    def str = localProperties.MAVEN_REPO_PATH
    if (isRelease) {
        str = str + "releases"
    } else {
        str = str + "snapshots"
    }
    return str
}

def boolean hasGit() {
    try {
        def proc = "git rev-parse --short HEAD".execute()
        proc.waitFor()
        return proc.exitValue() == 0;
    } catch (Throwable t) {
        return false
    }
}

def Process shell(String str) {
    def proc = str.execute()
    proc.waitFor()
    return proc
}