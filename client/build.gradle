buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'gradle.plugin.edu.sc.seis.gradle:launch4j:1.6.1'
    }
}
apply plugin: "java"
apply plugin: 'edu.sc.seis.launch4j'

sourceCompatibility = 1.7
sourceSets.main.java.srcDirs = ["src/"]

project.ext.mainClassName = "ethanjones.cubes.core.platform.desktop.ClientLauncher"
project.ext.assetsDir = new File("../assets")

task dist(dependsOn: classes, type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from { configurations.compile.collect { zipTree(it) } }
    from files(project.assetsDir)

    exclude("META-INF/", "lua*.class")

    archiveName = 'client.jar'

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

task distWin(dependsOn: classes, type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from { configurations.compile.collect { zipTree(it) } }
    from files(project.assetsDir)

    exclude("META-INF/", "lua*.class", "*.dylib", "*.so")

    archiveName = 'client-win.jar'

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

task run() << { //DOES NOT BUILD AUTOMATICALLY
    file(project.buildDir.absolutePath + "/run").mkdirs()
    javaexec {
        main = "-jar"
        args dist.archivePath
        workingDir = project.buildDir.absolutePath + "/run"
        maxHeapSize = "2G"
        ignoreExitValue = true
    }
}

run.mustRunAfter dist

launch4j {
    mainClassName = project.mainClassName
    jreMinVersion = '1.7.0'

    initialHeapSize = 2048
    maxHeapSize = 2048

    version = project.ext.buildProperties.version
    textVersion = project.ext.buildProperties.version

    icon = project.getRootDir().absolutePath + "/assets/assets/icon.ico"
    copyConfigurable = project.tasks.distWin.outputs.files
    jar = new File(project.buildDir, "/libs/client-win.jar")
}
copyL4jLib.dependsOn distWin

eclipse {
    project {
        name = appName + "-client"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/android/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
    doLast {
        def classpath = new XmlParser().parse(file(".classpath"))
        new Node(classpath, "classpathentry", [kind: 'src', path: 'assets'])
        def writer = new FileWriter(file(".classpath"))
        def printer = new XmlNodePrinter(new PrintWriter(writer))
        printer.setPreserveWhitespace(true)
        printer.print(classpath)
    }
}