apply plugin: "java"

sourceCompatibility = 1.7
sourceSets.main.java.srcDirs = ["src/"]

project.ext.mainClassName = "ethanjones.cubes.core.platform.desktop.ClientLauncher"
project.ext.assetsDir = new File("../assets");

task dist(dependsOn: classes, type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from { configurations.compile.collect { zipTree(it) } }
    from files(project.assetsDir);

    archiveName = 'client.jar'

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

task run() << { //DOES NOT BUILD AUTOMATICALLY
    file(project.buildDir.absolutePath + "/run").mkdirs()
    javaexec {
        main = "-jar"
        args dist.archivePath
        workingDir = project.buildDir.absolutePath + "/run"
        ignoreExitValue = true
    }
}

run.mustRunAfter dist

eclipse {
    project {
        name = appName + "-client"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/android/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
    doLast {
        def classpath = new XmlParser().parse(file(".classpath"))
        new Node(classpath, "classpathentry", [kind: 'src', path: 'assets']);
        def writer = new FileWriter(file(".classpath"))
        def printer = new XmlNodePrinter(new PrintWriter(writer))
        printer.setPreserveWhitespace(true)
        printer.print(classpath)
    }
}

publishing {
    publications {
        jar(MavenPublication) {
            artifact dist
            groupId 'ethanjones.cubes'
            artifactId 'client'
            version getMavenVersionString()
        }
    }
    repositories {
        maven {
            url getMavenRepo()
        }
    }
}

publish.dependsOn(['dist'])